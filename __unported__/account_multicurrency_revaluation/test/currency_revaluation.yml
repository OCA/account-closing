-
  In order to test the currency revaluation wizard
    I will set all 6 provision account
    And set 2 new currencies
      currency1 with an old rate and a new rate that will make loss
      currency2 with an old rate and a new rate that will make profit
    Then I define an account with currency1 with a starting amount
    Then I create a move to increase balance of account1
    Then I define an account with currency2 with a starting amount
    Then I create a move to increase balance of account2
    Then I launch the revaluation wizard
    Then I check 8 entries have been correctly created
-
  I create 6 provision accounts
-
  !record {model: account.account, id: acc_reval_loss}:
    name: "Reval Loss"
    code: "XR001"
    #company_id: default
    type: "other"
    user_type: !ref {model: account.account.type,
                     search: "[('code', '=', 'asset'), ('close_method', '=', 'balance')]"}
-
  !record {model: account.account, id: acc_reval_gain}:
    name: "Reval Gain"
    code: "XR002"
    #company_id: default
    type: "other"
    user_type: !ref {model: account.account.type,
                     search: "[('code', '=', 'asset'), ('close_method', '=', 'balance')]"}
-
  !record {model: account.account, id: acc_prov_bs_loss}:
    name: "Prov B.S Loss"
    code: "XPBS001"
    #company_id: default
    type: "other"
    user_type: !ref {model: account.account.type,
                     search: "[('code', '=', 'asset'), ('close_method', '=', 'balance')]"}
-
  !record {model: account.account, id: acc_prov_bs_gain}:
    name: "Prov B.S Gain"
    code: "XPBS002"
    #company_id: default
    type: "other"
    user_type: !ref {model: account.account.type,
                     search: "[('code', '=', 'asset'), ('close_method', '=', 'balance')]"}
-
  !record {model: account.account, id: acc_prov_pl_loss}:
    name: "Prov P&L Loss"
    code: "XPPL001"
    #company_id: default
    type: "other"
    user_type: !ref {model: account.account.type,
                     search: "[('code', '=', 'asset'), ('close_method', '=', 'balance')]"}
-
  !record {model: account.account, id: acc_prov_pl_gain}:
    name: "Prov P&L Gain"
    code: "XPPL002"
    #company_id: default
    type: "other"
    user_type: !ref {model: account.account.type,
                     search: "[('code', '=', 'asset'), ('close_method', '=', 'balance')]"}

-
  I set the 6 provision account in company
-
  !python {model: res.company}: |
    #select first company
    cp_id = self.search(cr, uid, [], limit=1)[0]

    data_accounts = {'revaluation_loss_account_id': ref('acc_reval_loss'),
                     'revaluation_gain_account_id': ref('acc_reval_gain'),
                     'provision_bs_loss_account_id': ref('acc_prov_bs_loss'),
                     'provision_bs_gain_account_id': ref('acc_prov_bs_gain'),
                     'provision_pl_loss_account_id': ref('acc_prov_pl_loss'),
                     'provision_pl_gain_account_id': ref('acc_prov_pl_gain')}
    self.write(cr, uid, cp_id, data_accounts)

-
  I ensure there is an opening entry if a previous fiscalyear exists
-
  !python {model: account.fiscalyear}: |
    from datetime import datetime

    user_obj = self.pool.get('res.users')
    move_obj = self.pool.get('account.move')
    move_line_obj = self.pool.get('account.move.line')
    journal_obj = self.pool.get('account.journal')
    period_obj = self.pool.get('account.period')
    cp = user_obj.browse(cr, uid, uid).company_id

    my_date = '%s-01-01' %(datetime.now().year)

    previous_fy = self.search(cr, uid,
                              [('date_stop', '<', my_date),
                               ('company_id', '=', cp.id)],
                              limit=1,
                              context=context)

    if previous_fy:

       journal_ids = journal_obj.search(cr, uid,
                                        [('type', '=', 'situation')],
                                        limit=1)
       current_fy_id = self.search(cr, uid,
                                [('date_start', '<=', my_date),
                                 ('date_stop', '>=', my_date),
                                 ('company_id', '=', cp.id)],
                                limit=1,
                                context=context)[0]
       current_fy = self.browse(cr, uid, current_fy_id)
       period_id = [p.id for p in current_fy.period_ids if p.special == True][0]

       # Create an entry
       move_data = {'name': "Opening entry",
                    'journal_id': journal_ids[0],
                    'period_id': period_id,
                    'date': my_date}
       move_id = move_obj.create(cr, uid, move_data, context=context)


-
  I set a default rate of our type for all currency to ensure all account will pass
-
  !python {model: res.currency}: |
    rate_obj = self.pool.get('res.currency.rate')
    currency_ids = self.search(cr, uid, [])
    currencies = self.browse(cr, uid, currency_ids)
    for cur in currencies:
      rate_data = {'name': "2010-01-01",
                   'rate': cur.rate,
                   'currency_id': cur.id,}
      rate_obj.create(cr, uid, rate_data)

-
  I create 2 foreign currencies
-
  !record {model: res.currency, id: currency1}:
    name: "Florin"
    symbol: "fl"
    rate_ids:
    - name: !eval "'%s-01-01' %(datetime.now().year)"
      rate: 100
    - name: !eval "'%s-01-11' %(datetime.now().year)"
      rate: 50
-
  !record {model: res.currency, id: currency2}:
    name: "Sesterce"
    symbol: "HS"
    rate_ids:
    - name: !eval "'%s-01-01' %(datetime.now().year)"
      rate: 2
    - name: !eval "'%s-01-11' %(datetime.now().year)"
      rate: 4

-
  I define 2 accounts
-
  !record {model: account.account, id: wiz_test_acc1}:
    name: "Account 1"
    code: "acc1"
    #company_id: default
    #type: default
    currency_revaluation: True
    user_type: !ref {model: account.account.type,
                     search: "[('code','=','asset'), ('close_method', '!=', 'none')]"}
    #currency_mode: default
    currency_id: currency1
-
  !record {model: account.account, id: wiz_test_acc2}:
    name: "Account 2"
    code: "acc2"
    #company_id: default
    #type: default
    currency_revaluation: True
    user_type: !ref {model: account.account.type,
                     search: "[('code','=','asset'), ('close_method', '!=', 'none')]"}
    #currency_mode: default
    currency_id: currency2

-
  I create a journal
-
  !record {model: account.journal, id: wiz_general_journal}:
    name: "A General Journal"
    code: "GJ"
    type: 'general'

-
  I increase balance of my 2 accounts on 1st january (using old rate)
-
  !record {model: account.move, id: wiz_test_move1}:
    #name: default
    #period_id: default
    journal_id: !ref {model: account.journal,
                      search: "[('type', '=', 'sale')]"}
    state: 'posted'
    date: !eval "'%s-01-01' %(datetime.now().year)"
- !record {model: account.move, id: wiz_test_move2}:
    #name: default
    #period_id: default
    journal_id: !ref {model: account.journal,
                      search: "[('type', '=', 'sale')]"}
    state: 'posted'
    date: !eval "'%s-01-01' %(datetime.now().year)"

-
  I insert a move line in move 1
-
  !python {model: account.move.line}: |
    from datetime import datetime
    vals = {
        'account_id': ref('wiz_test_acc1'),
        'amount_currency': -100000.0,
        'currency_id': ref('currency1'),
        'credit': 1000.0,
        'date': '%s-01-01' %(datetime.now().year),
        'debit': 0.0,
        'name': 'Increase balance',
        'quantity': 0.0,
        'move_id': ref('wiz_test_move1'),
        'state': 'valid'
    }
    line_id = self.create(cr, uid, vals)
    assert line_id, "Account move line has not been created"

-
  I insert a move line in move 2
-
  !python {model: account.move.line}: |
    from datetime import datetime
    vals = {
        'account_id': ref('wiz_test_acc2'),
        'amount_currency': -2000.0,
        'currency_id': ref('currency2'),
        'credit': 1000.0,
        'date': '%s-01-01' %(datetime.now().year),
        'debit': 0.0,
        'name': 'Increase balance',
        'quantity': 0.0,
        'move_id': ref('wiz_test_move2'),
        'state': 'valid'
    }
    line_id = self.create(cr, uid, vals)
    assert line_id, "Account move line has not been created"

-
  I Force my 2 move lines with a state to valid
-
  !python {model: account.move.line}: |
     cr.execute("UPDATE account_move_line SET state='valid' WHERE name = 'Increase balance'")

-
  Launch the computing with the currency revaluation wizard on 20 january (using new rates)
-
  !python {model: wizard.currency.revaluation}: |
    from datetime import datetime
    # Enter wizard data
    wiz_data = {'revaluation_date': '%s-01-20' %(datetime.now().year),
                'journal_id': ref('wiz_general_journal'),
                'label': '[%(account)s] wiz_test'}
    wiz_id = self.create(cr, uid, wiz_data)
    wiz = self.browse(cr, uid, wiz_id)
    # Call wizard computing
    result = wiz.revaluate_currency(context=context)
    assert result, "No result returned"

-
  I check I have the 8 following entries

    |---------------|--------|--------|

    | Account       | debit  | credit |

    |---------------|--------|--------|

    | Prov P&L Loss |    0.0 | 1000.0 |

    | Prov B.S Loss | 1000.0 |    0.0 |

    | Reval Loss   |    0.0 | 1000.0 |

    | Account 1     | 1000.0 |    0.0 |

    | Prov P&L Gain |  500.0 |    0.0 |

    | Prov B.S Gain |    0.0 |  500.0 |

    | Reval Gain   |  500.0 |    0.0 |

    | Account 2     |    0.0 |  500.0 |
-
  !python {model: account.move.line}: |
     label_search = "wiz_test"
     move_line_ids = self.search(cr, uid,
                                 [('name', 'like', label_search)])
     count_l = len(move_line_ids)
     assert count_l >= 8, "Some entries are missing found only %s on 8" %count_l
     lines = self.browse(cr, uid, move_line_ids)
     res = [(l.name, l.account_id.id, l.debit, l.credit) for l in lines]
     check_list = [(u'[acc1] wiz_test', ref('acc_prov_pl_loss'), 1000.0, 0.0),
                   (u'[acc1] wiz_test', ref('acc_prov_bs_loss'), 0.0, 1000.0),
                   (u'[acc1] wiz_test', ref('acc_reval_loss'), 1000.0, 0.0),
                   (u'[acc1] wiz_test', ref('wiz_test_acc1'), 0.0, 1000.0),
                   (u'[acc2] wiz_test', ref('acc_prov_pl_gain'), 0.0, 500.0),
                   (u'[acc2] wiz_test', ref('acc_prov_bs_gain'), 500.0, 0.0),
                   (u'[acc2] wiz_test', ref('acc_reval_gain'), 0.0, 500.0),
                   (u'[acc2] wiz_test', ref('wiz_test_acc2'), 500.0, 0.0),]
     assert set(check_list) <= set(res), ("Those lines are missing\n"+"\n".join([el[0] + " " + str(el[1:]) for el in list(set(check_list) - set(res))]))
