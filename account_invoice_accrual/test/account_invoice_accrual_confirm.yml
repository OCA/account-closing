-
  I create specific journal
-
  !record {model: account.journal, id: accrual_journal_0}:
    code: acc0
    company_id: base.main_company
    name: Accrual Journal 0
    type: general
-
  I create specific account
-
  !record {model: account.account, id: accrual_account_0}:
    name: "Accrual account"
    code: "ACC480000"
    company_id: base.main_company
    name: Accrual Account
    user_type: account.data_account_type_liability
-
  I set accrual information on company
-
  !record {model: res.company, id: base.main_company}:
    default_accrued_revenue_account_id: accrual_account_0
    default_accrued_expense_account_id: accrual_account_0
    default_cutoff_journal_id: accrual_journal_0
-
  I create a new invoice
-
  !record {model: account.invoice, id: accrual_invoice_0}:
    currency_id: base.EUR
    company_id: base.main_company
    partner_id: base.res_partner_17
    journal_id: account.sales_journal
    state: 'draft'
    type: 'out_invoice'
    account_id: account.a_sale
    invoice_line:
      - name: 'Otpez Laptop without OS'
        price_unit: 642
        quantity: 4
        account_id: account.a_sale
-
  I check the invoice is draft
-
  !assert {model: account.invoice, id: accrual_invoice_0}:
    - state == 'draft'
-
  I called the Accrual wizard
-
  !record {model: account.move.accrue, id: account_move_accrue_0, context: '{"lang": "en_US", "tz": False, "active_model": "account.invoice", "active_ids": [ref("accrual_invoice_0")], "active_id": ref("accrual_invoice_0"), }'}:
    account_id: accrual_account_0
    journal_id: accrual_journal_0
-
  I update date on the Accrual wizard
-
    !python {model: account.move.accrue}: |
        from datetime import date, timedelta
        from openerp.tools import DEFAULT_SERVER_DATE_FORMAT
        wiz_data = {
            'date': (date(date.today().year, date.today().month, 1) -
            timedelta(days=1)).strftime(DEFAULT_SERVER_DATE_FORMAT),
        }
        wiz_id = self.write(cr, uid, [ref("account_move_accrue_0")], wiz_data)
-
  I clicked on Accrual wizard confirm button
-
  !python {model: account.move.accrue}: |
    self.action_accrue(cr, uid, [ref("account_move_accrue_0")], {"lang": 'en_US',
      "tz": False, "active_model": "account.invoice", "active_ids": [ref("accrual_invoice_0")], "active_id": ref("accrual_invoice_0"), })
-
  I check that accrual_move_id is not empty
-
    !python {model: account.invoice}: |
      obj = self.browse(cr, uid, ref("accrual_invoice_0"))
      accrual_move = obj.accrual_move_id
      assert (accrual_move), "Accrual move doesn't exist"
-
  I confirm invoice
-
  !workflow {model: account.invoice, action: invoice_open, ref: accrual_invoice_0}
-
  I check that accrual_move_id is reversed
-
    !python {model: account.invoice}: |
      obj=self.browse(cr, uid, ref("accrual_invoice_0"))
      assert obj.accrual_move_id.reversal_id, "Accrual move is not reversed"
-
  I check that the invoice state is "Open"
-
  !assert {model: account.invoice, id: accrual_invoice_0}:
    - state == 'open'
-
  I check reversal move exist
-
    !python {model: account.move}: |
      ids = self.search(cr, uid, [('journal_id','=',ref('accrual_journal_0'))])
      assert (len(ids) == 2), "It doesn't exist 2 entries on accrual journal"
      obj = self.browse(cr,uid,ids)
      move1 = obj[0]
      move2 = obj[1]
      reverse = False
      if move1.reversal_id:
        reverse = True
        assert (move2.id == move1.reversal_id.id), "Movement don't correspond"
      if move2.reversal_id:
        reverse = True
        assert (move1.id == move2.reversal_id.id), "Movement don't correspond"
      assert reverse, "There is no reversal move"
